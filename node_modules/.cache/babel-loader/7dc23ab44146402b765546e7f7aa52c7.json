{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport noteService from '../services/notes';\nexport const generateId = () => Number((Math.random() * 10000000).toFixed(0));\nconst noteSlice = createSlice({\n  name: 'notes',\n  initialState: [],\n  reducers: {\n    toggleImportanceOf(state, action) {\n      const id = action.payload;\n      const noteToChange = state.find(note => note.id === id);\n      const changedNote = { ...noteToChange,\n        important: !noteToChange.important\n      };\n      return state.map(note => note.id === id ? changedNote : note);\n    },\n\n    appendNote(state, action) {\n      state.push(action.payload);\n    },\n\n    setNotes(_state, action) {\n      return action.payload;\n    }\n\n  }\n});\nexport const {\n  toggleImportanceOf,\n  appendNote,\n  setNotes\n} = noteSlice.actions;\nexport const initializeNotes = () => {\n  return async dispatch => {\n    const notes = await noteService.getAll();\n    dispatch(setNotes(notes));\n  };\n};\nexport const createNote = content => {\n  return async dispatch => {\n    const newNote = await noteService.createNew(content);\n    dispatch(appendNote(newNote));\n  };\n};\nexport default noteSlice.reducer;","map":{"version":3,"sources":["/home/missy/full_stack_open_course/part6/simple-notes/src/reducers/noteReducer.js"],"names":["createSlice","noteService","generateId","Number","Math","random","toFixed","noteSlice","name","initialState","reducers","toggleImportanceOf","state","action","id","payload","noteToChange","find","note","changedNote","important","map","appendNote","push","setNotes","_state","actions","initializeNotes","dispatch","notes","getAll","createNote","content","newNote","createNew","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAMC,MAAM,CAAC,CAACC,IAAI,CAACC,MAAL,KAAgB,QAAjB,EAA2BC,OAA3B,CAAmC,CAAnC,CAAD,CAA/B;AAEP,MAAMC,SAAS,GAAGP,WAAW,CAAC;AAC5BQ,EAAAA,IAAI,EAAE,OADsB;AAE5BC,EAAAA,YAAY,EAAE,EAFc;AAI5BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,kBAAkB,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAChC,YAAMC,EAAE,GAAGD,MAAM,CAACE,OAAlB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACK,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACJ,EAAL,KAAYA,EAA/B,CAArB;AAEA,YAAMK,WAAW,GAAG,EAClB,GAAGH,YADe;AAElBI,QAAAA,SAAS,EAAE,CAACJ,YAAY,CAACI;AAFP,OAApB;AAKA,aAAOR,KAAK,CAACS,GAAN,CAAUH,IAAI,IAAIA,IAAI,CAACJ,EAAL,KAAYA,EAAZ,GAAiBK,WAAjB,GAA+BD,IAAjD,CAAP;AACD,KAXO;;AAaRI,IAAAA,UAAU,CAACV,KAAD,EAAQC,MAAR,EAAgB;AACxBD,MAAAA,KAAK,CAACW,IAAN,CAAWV,MAAM,CAACE,OAAlB;AACD,KAfO;;AAiBRS,IAAAA,QAAQ,CAACC,MAAD,EAASZ,MAAT,EAAiB;AACvB,aAAOA,MAAM,CAACE,OAAd;AACD;;AAnBO;AAJkB,CAAD,CAA7B;AA2BA,OAAO,MAAM;AAAEJ,EAAAA,kBAAF;AAAsBW,EAAAA,UAAtB;AAAkCE,EAAAA;AAAlC,IAA+CjB,SAAS,CAACmB,OAA/D;AAEP,OAAO,MAAMC,eAAe,GAAG,MAAM;AACnC,SAAO,MAAMC,QAAN,IAAkB;AACvB,UAAMC,KAAK,GAAG,MAAM5B,WAAW,CAAC6B,MAAZ,EAApB;AACAF,IAAAA,QAAQ,CAACJ,QAAQ,CAACK,KAAD,CAAT,CAAR;AACD,GAHD;AAID,CALM;AAOP,OAAO,MAAME,UAAU,GAAGC,OAAO,IAAI;AACnC,SAAO,MAAMJ,QAAN,IAAkB;AACvB,UAAMK,OAAO,GAAG,MAAMhC,WAAW,CAACiC,SAAZ,CAAsBF,OAAtB,CAAtB;AACAJ,IAAAA,QAAQ,CAACN,UAAU,CAACW,OAAD,CAAX,CAAR;AACD,GAHD;AAID,CALM;AAOP,eAAe1B,SAAS,CAAC4B,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport noteService from '../services/notes';\n\nexport const generateId = () => Number((Math.random() * 10000000).toFixed(0));\n\nconst noteSlice = createSlice({\n  name: 'notes',\n  initialState: [],\n\n  reducers: {\n    toggleImportanceOf(state, action) {\n      const id = action.payload;\n      const noteToChange = state.find(note => note.id === id)\n\n      const changedNote = {\n        ...noteToChange,\n        important: !noteToChange.important,\n      }\n\n      return state.map(note => note.id === id ? changedNote : note);\n    },\n\n    appendNote(state, action) {\n      state.push(action.payload);\n    },\n\n    setNotes(_state, action) {\n      return action.payload;\n    },\n  },\n});\n\nexport const { toggleImportanceOf, appendNote, setNotes } = noteSlice.actions;\n\nexport const initializeNotes = () => {\n  return async dispatch => {\n    const notes = await noteService.getAll();\n    dispatch(setNotes(notes));\n  }\n}\n\nexport const createNote = content => {\n  return async dispatch => {\n    const newNote = await noteService.createNew(content);\n    dispatch(appendNote(newNote));\n  }\n}\n\nexport default noteSlice.reducer;"]},"metadata":{},"sourceType":"module"}