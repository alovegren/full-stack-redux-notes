{"ast":null,"code":"var _jsxFileName = \"/home/missy/full_stack_open_course/part6/simple-notes/src/components/Notes.js\";\nimport { useDispatch, connect } from 'react-redux';\nimport { toggleImportanceOf } from '../reducers/noteReducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Note = _ref => {\n  let {\n    note,\n    handleClick\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    onClick: handleClick,\n    children: [note.content, /*#__PURE__*/_jsxDEV(\"strong\", {\n      children: note.important ? 'important' : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 3\n  }, this);\n};\n\n_c = Note;\n\nconst Notes = props => {\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: props.notes.map(note => /*#__PURE__*/_jsxDEV(Note, {\n      note: note,\n      handleClick: () => props.toggleImportanceOf(note.id)\n    }, note.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Notes;\n\nconst mapStateToProps = state => {\n  switch (state.filter) {\n    case \"IMPORTANT\":\n      return {\n        notes: state.notes.filter(note => note.important)\n      };\n\n    case \"NOT_IMPORTANT\":\n      return {\n        notes: state.notes.filter(note => !note.important)\n      };\n\n    default:\n      return {\n        notes: state.notes\n      };\n  }\n};\n\nconst mapDispatchToProps = {\n  toggleImportanceOf\n};\nconst ConnectedNotes = connect(mapStateToProps, mapDispatchToProps)(Notes);\nexport default ConnectedNotes;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Note\");\n$RefreshReg$(_c2, \"Notes\");","map":{"version":3,"sources":["/home/missy/full_stack_open_course/part6/simple-notes/src/components/Notes.js"],"names":["useDispatch","connect","toggleImportanceOf","Note","note","handleClick","content","important","Notes","props","notes","map","id","mapStateToProps","state","filter","mapDispatchToProps","ConnectedNotes"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,OAAtB,QAAqC,aAArC;AACA,SAASC,kBAAT,QAAmC,yBAAnC;;;AAEA,MAAMC,IAAI,GAAG;AAAA,MAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAD;AAAA,sBACX;AAAI,IAAA,OAAO,EAAEA,WAAb;AAAA,eACGD,IAAI,CAACE,OADR,eAEE;AAAA,gBAASF,IAAI,CAACG,SAAL,GAAiB,WAAjB,GAA+B;AAAxC;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADW;AAAA,CAAb;;KAAMJ,I;;AAON,MAAMK,KAAK,GAAIC,KAAD,IAAW;AACvB,sBACE;AAAA,cACGA,KAAK,CAACC,KAAN,CAAYC,GAAZ,CAAgBP,IAAI,iBACnB,QAAC,IAAD;AAEE,MAAA,IAAI,EAAEA,IAFR;AAGE,MAAA,WAAW,EAAE,MAAMK,KAAK,CAACP,kBAAN,CAAyBE,IAAI,CAACQ,EAA9B;AAHrB,OACOR,IAAI,CAACQ,EADZ;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAZD;;MAAMJ,K;;AAcN,MAAMK,eAAe,GAAIC,KAAD,IAAW;AACjC,UAAQA,KAAK,CAACC,MAAd;AACE,SAAK,WAAL;AACE,aAAO;AAAEL,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYK,MAAZ,CAAmBX,IAAI,IAAIA,IAAI,CAACG,SAAhC;AAAT,OAAP;;AACF,SAAK,eAAL;AACE,aAAO;AAAEG,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYK,MAAZ,CAAmBX,IAAI,IAAI,CAACA,IAAI,CAACG,SAAjC;AAAT,OAAP;;AACF;AACE,aAAO;AAAEG,QAAAA,KAAK,EAAEI,KAAK,CAACJ;AAAf,OAAP;AANJ;AAQD,CATD;;AAWA,MAAMM,kBAAkB,GAAG;AACzBd,EAAAA;AADyB,CAA3B;AAIA,MAAMe,cAAc,GAAGhB,OAAO,CAC5BY,eAD4B,EAE5BG,kBAF4B,CAAP,CAGnBR,KAHmB,CAAvB;AAKA,eAAeS,cAAf","sourcesContent":["import { useDispatch, connect } from 'react-redux';\nimport { toggleImportanceOf } from '../reducers/noteReducer';\n\nconst Note = ({ note, handleClick}) => (\n  <li onClick={handleClick}>\n    {note.content}\n    <strong>{note.important ? 'important' : ''}</strong>\n  </li>\n);\n\nconst Notes = (props) => {\n  return (\n    <ul>\n      {props.notes.map(note => \n        <Note\n          key={note.id} \n          note={note}\n          handleClick={() => props.toggleImportanceOf(note.id)}\n        />\n      )}\n    </ul>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  switch (state.filter) {\n    case \"IMPORTANT\":\n      return { notes: state.notes.filter(note => note.important) };\n    case \"NOT_IMPORTANT\":\n      return { notes: state.notes.filter(note => !note.important) };\n    default:\n      return { notes: state.notes };\n  }\n}\n\nconst mapDispatchToProps = {\n  toggleImportanceOf,\n}\n\nconst ConnectedNotes = connect(\n  mapStateToProps,\n  mapDispatchToProps\n  )(Notes);\n\nexport default ConnectedNotes;"]},"metadata":{},"sourceType":"module"}