{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const generateId = () => Number((Math.random() * 10000000).toFixed(0));\nconst noteSlice = createSlice({\n  name: 'notes',\n  initialState: [],\n  reducers: {\n    createNote(state, action) {\n      state.push({\n        content,\n        important: false,\n        id: generateId()\n      });\n    }\n\n  },\n\n  toggleImportanceOf(state, action) {\n    const id = action.payload;\n    const noteToChange = state.find(note => note.id === id);\n    const changedNote = { ...noteToChange,\n      important: !noteToChange.important\n    };\n    return state.map(note => note.id === id ? changedNote : note);\n  },\n\n  appendNote(state, action) {\n    state.push(action.payload);\n  },\n\n  setNotes(_state, action) {\n    return action.payload;\n  }\n\n});\nexport const {\n  createNote,\n  toggleImportanceOf,\n  appendNote,\n  setNotes\n} = noteSlice.actions;\nexport default noteSlice.reducer;","map":{"version":3,"sources":["/home/missy/full_stack_open_course/part6/simple-notes/src/reducers/noteReducer.js"],"names":["createSlice","generateId","Number","Math","random","toFixed","noteSlice","name","initialState","reducers","createNote","state","action","push","content","important","id","toggleImportanceOf","payload","noteToChange","find","note","changedNote","map","appendNote","setNotes","_state","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAMC,MAAM,CAAC,CAACC,IAAI,CAACC,MAAL,KAAgB,QAAjB,EAA2BC,OAA3B,CAAmC,CAAnC,CAAD,CAA/B;AAEP,MAAMC,SAAS,GAAGN,WAAW,CAAC;AAC5BO,EAAAA,IAAI,EAAE,OADsB;AAE5BC,EAAAA,YAAY,EAAE,EAFc;AAI5BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACxBD,MAAAA,KAAK,CAACE,IAAN,CAAW;AACTC,QAAAA,OADS;AAETC,QAAAA,SAAS,EAAE,KAFF;AAGTC,QAAAA,EAAE,EAAEf,UAAU;AAHL,OAAX;AAKD;;AAPO,GAJkB;;AAc5BgB,EAAAA,kBAAkB,CAACN,KAAD,EAAQC,MAAR,EAAgB;AAChC,UAAMI,EAAE,GAAGJ,MAAM,CAACM,OAAlB;AACA,UAAMC,YAAY,GAAGR,KAAK,CAACS,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACL,EAAL,KAAYA,EAA/B,CAArB;AAEA,UAAMM,WAAW,GAAG,EAClB,GAAGH,YADe;AAElBJ,MAAAA,SAAS,EAAE,CAACI,YAAY,CAACJ;AAFP,KAApB;AAKA,WAAOJ,KAAK,CAACY,GAAN,CAAUF,IAAI,IAAIA,IAAI,CAACL,EAAL,KAAYA,EAAZ,GAAiBM,WAAjB,GAA+BD,IAAjD,CAAP;AACD,GAxB2B;;AA0B5BG,EAAAA,UAAU,CAACb,KAAD,EAAQC,MAAR,EAAgB;AACxBD,IAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACM,OAAlB;AACD,GA5B2B;;AA8B5BO,EAAAA,QAAQ,CAACC,MAAD,EAASd,MAAT,EAAiB;AACvB,WAAOA,MAAM,CAACM,OAAd;AACD;;AAhC2B,CAAD,CAA7B;AAmCA,OAAO,MAAM;AAAER,EAAAA,UAAF;AAAcO,EAAAA,kBAAd;AAAkCO,EAAAA,UAAlC;AAA8CC,EAAAA;AAA9C,IAA2DnB,SAAS,CAACqB,OAA3E;AACP,eAAerB,SAAS,CAACsB,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const generateId = () => Number((Math.random() * 10000000).toFixed(0));\n\nconst noteSlice = createSlice({\n  name: 'notes',\n  initialState: [],\n\n  reducers: {\n    createNote(state, action) {\n      state.push({\n        content,\n        important: false,\n        id: generateId(),\n      });\n    },\n  },\n\n  toggleImportanceOf(state, action) {\n    const id = action.payload;\n    const noteToChange = state.find(note => note.id === id)\n    \n    const changedNote = {\n      ...noteToChange,\n      important: !noteToChange.important,\n    }\n    \n    return state.map(note => note.id === id ? changedNote : note);\n  },\n\n  appendNote(state, action) {\n    state.push(action.payload);\n  },\n\n  setNotes(_state, action) {\n    return action.payload;\n  }\n});\n\nexport const { createNote, toggleImportanceOf, appendNote, setNotes } = noteSlice.actions;\nexport default noteSlice.reducer;"]},"metadata":{},"sourceType":"module"}