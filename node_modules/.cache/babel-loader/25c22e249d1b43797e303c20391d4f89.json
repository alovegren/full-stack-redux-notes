{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = [{\n  content: 'reducer defines how redux store works',\n  important: true,\n  id: 1\n}, {\n  content: 'state of store can contain any data',\n  important: false,\n  id: 2\n}]; // const noteReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case 'NEW_NOTE':\n//       return [...state, action.data];\n//     case 'TOGGLE_IMPORTANCE':\n//       const id = action.data.id;\n//       const noteToChange = state.find(n => n.id === id);\n//       const changedNote = {\n//         ...noteToChange,\n//         important: !noteToChange.important\n//       };\n//       return state.map(note => (\n//         note.id === id ? changedNote : note\n//       ));\n//     default:\n//       return state;\n//   }\n// }\n\nexport const generateId = () => Number((Math.random() * 10000000).toFixed(0));\nexport const createNote = content => {\n  return {\n    type: 'NEW_NOTE',\n    data: {\n      content,\n      important: false,\n      id: generateId()\n    }\n  };\n};\nexport const toggleImportanceOf = id => {\n  return {\n    type: 'TOGGLE_IMPORTANCE',\n    data: {\n      id\n    }\n  };\n};\nconst noteSlice = createSlice({\n  name: 'notes',\n  initialState,\n  reducers: {\n    createNote(state, action) {\n      const content = action.payload;\n      state.push({\n        content,\n        important: false,\n        id: generateId()\n      });\n    }\n\n  },\n\n  toggleImportanceOf(state, action) {\n    const id = action.payload;\n    const noteToChange = state.find(note => note.id === id);\n    const changedNote = { ...noteToChange,\n      important: !noteToChange.important\n    };\n    return state.map(note => note.id === id ? changedNote : note);\n  }\n\n});\nexport default noteReducer;","map":{"version":3,"sources":["/home/missy/full_stack_open_course/part6/simple-notes/src/reducers/noteReducer.js"],"names":["createSlice","initialState","content","important","id","generateId","Number","Math","random","toFixed","createNote","type","data","toggleImportanceOf","noteSlice","name","reducers","state","action","payload","push","noteToChange","find","note","changedNote","map","noteReducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG,CACnB;AACEC,EAAAA,OAAO,EAAE,uCADX;AAEEC,EAAAA,SAAS,EAAE,IAFb;AAGEC,EAAAA,EAAE,EAAE;AAHN,CADmB,EAMnB;AACEF,EAAAA,OAAO,EAAE,qCADX;AAEEC,EAAAA,SAAS,EAAE,KAFb;AAGEC,EAAAA,EAAE,EAAE;AAHN,CANmB,CAArB,C,CAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAMC,MAAM,CAAC,CAACC,IAAI,CAACC,MAAL,KAAgB,QAAjB,EAA2BC,OAA3B,CAAmC,CAAnC,CAAD,CAA/B;AAEP,OAAO,MAAMC,UAAU,GAAIR,OAAD,IAAa;AACrC,SAAO;AACLS,IAAAA,IAAI,EAAE,UADD;AAELC,IAAAA,IAAI,EAAE;AACJV,MAAAA,OADI;AAEJC,MAAAA,SAAS,EAAE,KAFP;AAGJC,MAAAA,EAAE,EAAEC,UAAU;AAHV;AAFD,GAAP;AAQD,CATM;AAWP,OAAO,MAAMQ,kBAAkB,GAAIT,EAAD,IAAQ;AACxC,SAAO;AACLO,IAAAA,IAAI,EAAE,mBADD;AAELC,IAAAA,IAAI,EAAE;AAAER,MAAAA;AAAF;AAFD,GAAP;AAID,CALM;AAOP,MAAMU,SAAS,GAAGd,WAAW,CAAC;AAC5Be,EAAAA,IAAI,EAAE,OADsB;AAE5Bd,EAAAA,YAF4B;AAG5Be,EAAAA,QAAQ,EAAE;AACRN,IAAAA,UAAU,CAACO,KAAD,EAAQC,MAAR,EAAgB;AACxB,YAAMhB,OAAO,GAAGgB,MAAM,CAACC,OAAvB;AACAF,MAAAA,KAAK,CAACG,IAAN,CAAW;AACTlB,QAAAA,OADS;AAETC,QAAAA,SAAS,EAAE,KAFF;AAGTC,QAAAA,EAAE,EAAEC,UAAU;AAHL,OAAX;AAKD;;AARO,GAHkB;;AAc5BQ,EAAAA,kBAAkB,CAACI,KAAD,EAAQC,MAAR,EAAgB;AAChC,UAAMd,EAAE,GAAGc,MAAM,CAACC,OAAlB;AACA,UAAME,YAAY,GAAGJ,KAAK,CAACK,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACnB,EAAL,KAAYA,EAA/B,CAArB;AAEA,UAAMoB,WAAW,GAAG,EAClB,GAAGH,YADe;AAElBlB,MAAAA,SAAS,EAAE,CAACkB,YAAY,CAAClB;AAFP,KAApB;AAKA,WAAOc,KAAK,CAACQ,GAAN,CAAUF,IAAI,IACnBA,IAAI,CAACnB,EAAL,KAAYA,EAAZ,GAAiBoB,WAAjB,GAA+BD,IAD1B,CAAP;AAGD;;AA1B2B,CAAD,CAA7B;AA6BA,eAAeG,WAAf","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = [\n  {\n    content: 'reducer defines how redux store works',\n    important: true,\n    id: 1,\n  },\n  {\n    content: 'state of store can contain any data',\n    important: false,\n    id: 2,\n  },\n]\n\n// const noteReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case 'NEW_NOTE':\n//       return [...state, action.data];\n//     case 'TOGGLE_IMPORTANCE':\n//       const id = action.data.id;\n//       const noteToChange = state.find(n => n.id === id);\n//       const changedNote = {\n//         ...noteToChange,\n//         important: !noteToChange.important\n//       };\n\n//       return state.map(note => (\n//         note.id === id ? changedNote : note\n//       ));\n//     default:\n//       return state;\n//   }\n// }\n\nexport const generateId = () => Number((Math.random() * 10000000).toFixed(0));\n\nexport const createNote = (content) => {\n  return {\n    type: 'NEW_NOTE',\n    data: {\n      content,\n      important: false,\n      id: generateId(),\n    }\n  };\n}\n\nexport const toggleImportanceOf = (id) => {\n  return {\n    type: 'TOGGLE_IMPORTANCE',\n    data: { id },\n  };\n}\n\nconst noteSlice = createSlice({\n  name: 'notes',\n  initialState,\n  reducers: {\n    createNote(state, action) {\n      const content = action.payload;\n      state.push({\n        content,\n        important: false,\n        id: generateId(),\n      });\n    },\n  },\n\n  toggleImportanceOf(state, action) {\n    const id = action.payload;\n    const noteToChange = state.find(note => note.id === id)\n    \n    const changedNote = {\n      ...noteToChange,\n      important: !noteToChange.important,\n    }\n    \n    return state.map(note => \n      note.id === id ? changedNote : note\n    );\n  }\n})\n\nexport default noteReducer;"]},"metadata":{},"sourceType":"module"}